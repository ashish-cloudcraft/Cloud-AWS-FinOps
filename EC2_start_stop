âœ… Overview
You will:

Create IAM role with permissions.

Write Lambda functions to start and stop EC2 instances.

Create EventBridge rules to trigger Lambda functions on a schedule.

ðŸ”§ Step-by-Step Setup
1. Create IAM Role for Lambda
Go to IAM > Roles > Create role

Choose Lambda as the trusted entity

Attach the following policies:

AmazonEC2FullAccess (or custom policy with just StartInstances, StopInstances, DescribeInstances)

CloudWatchLogsFullAccess (for logs)

Name it something like: Lambda-EC2Scheduler-Role

2. Create Lambda Function to Stop EC2 Instances
Go to AWS Lambda > Create function

Choose "Author from scratch"

Name: StopEC2Instances

Runtime: Python 3.x (or Node.js if preferred)

Choose the IAM role you created

Use this code (Python example):

python
Copy
Edit
import boto3

def lambda_handler(event, context):
    ec2 = boto3.client('ec2')
    
    # Add your instance IDs or use filters
    instances = ['i-0123456789abcdef0', 'i-0abcdef1234567890']
    
    print("Stopping instances: ", instances)
    ec2.stop_instances(InstanceIds=instances)
Save the function.

3. Create Lambda Function to Start EC2 Instances
Repeat the steps above but use this code:

python
Copy
Edit
import boto3

def lambda_handler(event, context):
    ec2 = boto3.client('ec2')
    
    # Add your instance IDs
    instances = ['i-0123456789abcdef0', 'i-0abcdef1234567890']
    
    print("Starting instances: ", instances)
    ec2.start_instances(InstanceIds=instances)
4. Create Scheduled EventBridge Rules
Go to Amazon EventBridge > Rules > Create rule

Name: StartEC2Schedule

Rule type: Schedule

Define schedule using cron expression (UTC). E.g.:

scss
Copy
Edit
cron(0 8 * * ? *)  â†’ Every day at 8:00 AM UTC
Use this for start schedule.

Target: Lambda function StartEC2Instances

Repeat for the stop schedule with different cron time:

scss
Copy
Edit
cron(0 20 * * ? *)  â†’ Every day at 8:00 PM UTC
Target: Lambda function StopEC2Instances

ðŸ§  Notes
Time Zone: Cron in EventBridge uses UTC, adjust accordingly.

Tag-Based Automation (Optional): You can also filter instances by tags using describe_instances() and only start/stop instances with a tag like AutoSchedule=True.

Security: Consider using a custom IAM policy with only StartInstances, StopInstances, and DescribeInstances instead of EC2FullAccess.
